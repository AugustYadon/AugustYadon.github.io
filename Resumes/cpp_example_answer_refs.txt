
class Solution {
    public:
    vector<vector<int> > diagonal(vector<vector<int> > Vec) {
        int N = Vec.size();
        if(N == 1)
                return Vec;
        
        vector<pair<int, int> > search_space;        //Vector Declare but don't initialize because you won't be reading from it.
        for(int i = 0; i < N; ++i) {
            search_space.push_back(make_pair(0, i));    //spend first chunk of time creating list of locations to iterate. logical, maintainable.
        }
        for(int i = 1; i < N; ++i) {
            search_space.push_back(make_pair(i, N - 1));
        }

        vector<vector<int> > Ans;                   //Vector Declare but don't initialize because you won't be reading from it.
        for(int i = 0; i < search_space.size(); ++i) {
            vector<int> Temp;                       // Must declare separate vector for each row. then push that into vector<vector>
            int x = search_space[i].first;          //pairs useful, read about them
            int y = search_space[i].second;
            while(x < N && y >= 0) {
                Temp.push_back(Vec[x][y]);
                x += 1;
                y -= 1;
            }
            Ans.push_back(Temp);
        }

        return Ans;
    }
};





//TRIEs
class Solution {
    public:
    int IDX;
    vector<vector<int> > Cnt;
    vector<vector<int> > Trie;
    
    void insert(string str)
    {
        int len = str.size();
        int root = 0;
        int i = 0;

        while(i < len) {
            int chr = str[i] - 'a';
            if(Trie[root][chr] == -1) {
                ++IDX;
                Trie[root][chr] = IDX;
                Cnt[root][chr] = 1;
            } else {
                Cnt[root][chr]++;
            }
            root = Trie[root][chr];
            i++;
        }
    }

    string Query(string str) 
    {
        int root = 0;
        string ans = "";
        int i = 0;
        int len = str.size();

        while(i < len) {
            int chr = str[i] - 'a';
            ans += str[i];
            if(Cnt[root][chr] == 1)
                    return ans;
            root = Trie[root][chr];
            i++;
        }
        return "";
    }

    vector<string> prefix(vector<string> Vec)
    {
        int mx_len = 0;
        int N = Vec.size();
        for(int i = 0; i < N; ++i) {
            mx_len = max(mx_len, (int)Vec[i].size());
        }

        Trie.clear();
        Cnt.clear();
        Trie.resize(N * mx_len + 1, vector<int>(27, -1));
        Cnt.resize(N * mx_len + 1, vector<int>(27, -1));
        IDX = 0;

        for(int i = 0; i < N; ++i) {
            insert(Vec[i]);
        } 

        vector<string> Ans;
        for(int i = 0; i < N; ++i) {
            string ans = Query(Vec[i]);
            Ans.push_back(ans); 
        }

        return Ans;
    }
};

