Pointer cheatsheet
------------------
float* p    p is address
*p          *p is value at address p

float x     x is value
&x			&x gives address for x


Endian Notes
------------------
little endian
00 01 = 8
least sig >> most sig
little end >> big end

big endian
00 01 = 1
most sig >> least sig
bigend >> little end

one reason for using little endian, which my computer uses, is that if you're downcasting, you can just reference the first bytes that you need (rather than moving the pointer to the last couple bytes), and clip off the rest

int x = 0000000016 
ushort y = (ushort)x 


Unions
--------------------
unions are structures that hold multiple datatypes in the same space

if you have 
Union {
	int a;
	char[5] b;
	int64 c;
}
then it's size is the size of the longest member and any value stored to it is stored accross all of the types


Values
------------
SHRT_MAX	Maximum value for a variable of type short.	32767
USHRT_MAX	Maximum value for a variable of type unsigned short.	65535 (0xffff)
INT_MIN	Minimum value for a variable of type int .	–2147483647 – 1
INT_MAX	Maximum value for a variable of type int .	2147483647


Initialize!!!
--------------
int total_moves = 0;
if you don't initialize, you get whatever was there in memory before!


Vector.push_back() //add entry to the end of a Vector 

string(char[]) creates string from char[]

https://codelab.interviewbit.com/problems/nested_cmpl3/


MAPS
------------------
std::map<std::string, int> mapOfWords;
    
    if(mapOfWords.insert(std::make_pair("earth", 1)).second == false)
    {
        std::cout<<"Element with key 'earth' not inserted because already existed"<<std::endl;
    }
    mapOfWords["earth"] = 4; // this will update the entry where .insert will return false and leave what was there

REMEMBER .second is the success bool


SETS
-----
same as Maps but only a key value, not a pair
set.erase(val) removes it from the set, also "pops" it
set<int> i;
to return a value:
	return *i.begin();

SWAP
-----------------
std::swap(x,y); 


SORT VECTOR
-----------------
sort(A.begin(), A.end());



BITWISE OPERATIONS
----------------
xor  result ^= x;
flips all bits associated with x, good way to check if x exists twice;

AND result &= x;

OR result |= x;

NOT ~ 

NAND  ~(a & b) 
with three operands would look like 
        ~(a & b & c) 
      ~a | ~b | ~c. 



STRINGS
----------------
std::string str = ???;
for(char& c : str) {
    do_things_with(c);
}

return_value += (int)(c - 'A') + 1;      


size_t
---------------
unsigned


delete
---------------


constructor vs destructor
----------------
class A{
	A() {} //create instance
	~A() {} //destroy instance, free up memory automatically called when popped off 
}



increment/decrement operators
---------------
i++ copies variable and then returns
++i is faster. modern compilers will convert to this where applicable

boost library for C++
-------------------


c++ templates
-------------------
template <class T>
T GetMax (T a, T b) {
  T result;
  result = (a>b)? a : b;
  return (result);
}

int main () {
  int i=5, j=6, k;
  long l=10, m=5, n;
  k=GetMax<int>(i,j);
  n=GetMax<long>(l,m);
  cout << k << endl;
  cout << n << endl;
  return 0;
}


inline functions
------------------
c++ compiler will take entire function and attempt to place it in the place where you are calling it, so that the program does not need to hand off the thread to another function and wait for it to return. This generally works well for small functions that get called a lot, where the actual meat of the function execution time is comparable to the time it takes to switch execution to and from that separate function.


http://en.cppreference.com/w/cpp/language/reinterpret_cast
------------------


class vs struct
------------------
The only difference between a class and struct are the access modifiers. Struct members are public by default; class members are private. It is good practice to use classes when you need an object that has methods and structs when you have a simple data object.


the magic behind square brackets with pointers.
------------------
(1+3)[a] is the same as a[1+3]
(a + 1)[2] is the same as a[3]


mutable 
-----------------
add this identifier to a member of a class/struct
if you define a class/struct as a Const the mutable members will still be changable via member functions

volatile
----------------
volatile keyword informs the compiler that a variable may change without the compiler knowing it. Variables that are declared as volatile will not be cached by the compiler, and will thus always be read from memory.

extern "C"
---------------
can represent and call C language code in C++